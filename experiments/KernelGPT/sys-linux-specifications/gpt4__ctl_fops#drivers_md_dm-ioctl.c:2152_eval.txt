meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/fcntl.h>
include <uapi/linux/dm-ioctl.h>
include <uapi/asm-generic/fcntl.h>

resource fd_dm_ctl[fd]

openat$KGPT_dm_ctl(fd const[AT_FDCWD], file ptr[in, string["/dev/mapper/control"]], flags const[O_RDWR], mode const[0]) fd_dm_ctl

ioctl$KGPT_DM_VERSION_CMD(fd fd_dm_ctl, cmd const[DM_VERSION_CMD], arg ptr[in, array[int8]])
ioctl$KGPT_DM_DEV_CREATE(fd fd_dm_ctl, cmd const[DM_DEV_CREATE], arg ptr[in, array[int8]])
ioctl$KGPT_DM_DEV_REMOVE(fd fd_dm_ctl, cmd const[DM_DEV_REMOVE], arg ptr[in, array[int8]])
ioctl$KGPT_DM_DEV_SUSPEND(fd fd_dm_ctl, cmd const[DM_DEV_SUSPEND], arg ptr[in, array[int8]])
ioctl$KGPT_DM_DEV_STATUS(fd fd_dm_ctl, cmd const[DM_DEV_STATUS], arg ptr[in, array[int8]])
ioctl$KGPT_DM_TABLE_CLEAR(fd fd_dm_ctl, cmd const[DM_TABLE_CLEAR], arg ptr[in, array[int8]])
ioctl$KGPT_DM_DEV_ARM_POLL(fd fd_dm_ctl, cmd const[DM_DEV_ARM_POLL], arg ptr[in, array[int8]])
ioctl$KGPT_DM_DEV_RENAME(fd fd_dm_ctl, cmd const[DM_DEV_RENAME], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_DEV_WAIT(fd fd_dm_ctl, cmd const[DM_DEV_WAIT], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_TABLE_LOAD(fd fd_dm_ctl, cmd const[DM_TABLE_LOAD], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_TABLE_DEPS(fd fd_dm_ctl, cmd const[DM_TABLE_DEPS], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_TABLE_STATUS(fd fd_dm_ctl, cmd const[DM_TABLE_STATUS], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_LIST_VERSIONS(fd fd_dm_ctl, cmd const[DM_LIST_VERSIONS], arg ptr[inout, dm_ioctl])
ioctl$KGPT_DM_TARGET_MSG(fd fd_dm_ctl, cmd const[DM_TARGET_MSG], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_DEV_SET_GEOMETRY(fd fd_dm_ctl, cmd const[DM_DEV_SET_GEOMETRY], arg ptr[in, dm_ioctl])
ioctl$KGPT_DM_GET_TARGET_VERSION(fd fd_dm_ctl, cmd const[DM_GET_TARGET_VERSION], arg ptr[inout, dm_ioctl])

dm_ioctl {
	version		array[int32, 3]
	data_size	int32
	data_start	int32
	target_count	int32
	open_count	int32
	flags		int32
	event_nr	int32
	padding		int32
	dev		int64
	name		array[int8, DM_NAME_LEN]
	uuid		array[int8, DM_UUID_LEN]
	data		array[int8, 7]
}
