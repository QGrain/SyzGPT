meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/vt.h>

syz_open_dev$KGPT_tty(dev ptr[in, string["/dev/tty#"]], id proc[0, 1], flags flags[open_flags]) fd_tty

ioctl$KGPT_VT_LOCKSWITCH(fd fd_tty, cmd const[VT_LOCKSWITCH], arg ptr[in, array[int8]])
ioctl$KGPT_VT_UNLOCKSWITCH(fd fd_tty, cmd const[VT_UNLOCKSWITCH], arg ptr[in, array[int8]])
ioctl$KGPT_VT_SETACTIVATE(fd fd_tty, cmd const[VT_SETACTIVATE], arg ptr[in, vt_setactivate])
ioctl$KGPT_VT_GETHIFONTMASK(fd fd_tty, cmd const[VT_GETHIFONTMASK], arg ptr[out, int16])
ioctl$KGPT_VT_WAITEVENT(fd fd_tty, cmd const[VT_WAITEVENT], arg ptr[in, vt_event])

vt_setactivate {
	console	int32
	mode	vt_mode
}

vt_event {
	event	flags[vt_event_flags, int32]
	oldev	int32
	newev	int32
	pad	array[int32, 4]
}

vt_event_flags = VT_EVENT_SWITCH, VT_EVENT_BLANK, VT_EVENT_UNBLANK, VT_EVENT_RESIZE, VT_MAX_EVENT
