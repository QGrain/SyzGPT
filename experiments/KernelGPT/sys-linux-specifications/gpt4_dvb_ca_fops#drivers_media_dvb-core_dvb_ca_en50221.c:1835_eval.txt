meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/dvb/ca.h>

resource fd_dvb_ca[fd]

syz_open_dev$KGPT_dvb_ca_dup(dev ptr[in, string["/dev/dvb/adapter#/ca#"]], id proc[0, 1], flags flags[open_flags]) fd_dvb_ca

ioctl$KGPT_CA_RESET_0(fd fd_dvb_ca, cmd const[CA_RESET], arg ptr[in, array[int8]])
ioctl$KGPT_CA_GET_CAP_0(fd fd_dvb_ca, cmd const[CA_GET_CAP], arg ptr[out, ca_caps])
ioctl$KGPT_CA_GET_SLOT_INFO_0(fd fd_dvb_ca, cmd const[CA_GET_SLOT_INFO], arg ptr[inout, ca_slot_info])
