meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/fsl_mc.h>
include <uapi/linux/fcntl.h>

resource fd_fsl_mc[fd]

openat$KGPT_mc(fd const[AT_FDCWD], file ptr[in, string["/dev/fsl-mc"]], flags flags[open_flags], mode const[0]) fd_fsl_mc

ioctl$KGPT_FSL_MC_SEND_MC_COMMAND(fd fd_fsl_mc, cmd const[FSL_MC_SEND_MC_COMMAND], arg ptr[inout, fsl_mc_command])

fsl_mc_command {
	header	int64
	params	array[int64, MC_CMD_NUM_OF_PARAMS]
}
