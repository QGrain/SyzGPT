meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/fcntl.h>
include <uapi/linux/vfio.h>
include <uapi/asm-generic/fcntl.h>

resource fd_vgpu[fd]

openat$KGPT_vgpu(fd const[AT_FDCWD], file ptr[in, string["/dev/vfio/vfio"]], flags const[O_RDWR], mode const[0]) fd_vgpu

ioctl$KGPT_VFIO_DEVICE_RESET_1(fd fd_vgpu, cmd const[VFIO_DEVICE_RESET], arg ptr[in, array[int8]])
ioctl$KGPT_VFIO_DEVICE_GET_INFO_1(fd fd_vgpu, cmd const[VFIO_DEVICE_GET_INFO], arg ptr[in, vfio_device_info])
ioctl$KGPT_VFIO_DEVICE_GET_REGION_INFO_1(fd fd_vgpu, cmd const[VFIO_DEVICE_GET_REGION_INFO], arg ptr[in, vfio_region_info])
ioctl$KGPT_VFIO_DEVICE_GET_IRQ_INFO_1(fd fd_vgpu, cmd const[VFIO_DEVICE_GET_IRQ_INFO], arg ptr[in, vfio_irq_info])
ioctl$KGPT_VFIO_DEVICE_SET_IRQS_1(fd fd_vgpu, cmd const[VFIO_DEVICE_SET_IRQS], arg ptr[in, vfio_irq_set])
ioctl$KGPT_VFIO_DEVICE_QUERY_GFX_PLANE(fd fd_vgpu, cmd const[VFIO_DEVICE_QUERY_GFX_PLANE], arg ptr[inout, vfio_device_gfx_plane_info])
ioctl$KGPT_VFIO_DEVICE_GET_GFX_DMABUF(fd fd_vgpu, cmd const[VFIO_DEVICE_GET_GFX_DMABUF], arg ptr[in, int32])

vfio_device_gfx_plane_info {
	argsz		int32
	flags		flags[vfio_device_gfx_plane_info_flags, int32]
	drm_plane_type	int32
	drm_format	int32
	drm_format_mod	int64
	width		int32
	height		int32
	stride		int32
	size		int32
	x_pos		int32
	y_pos		int32
	x_hot		int32
	y_hot		int32
	union		vfio_device_gfx_plane_info_union
	reserved	int32
}

vfio_device_gfx_plane_info_flags = VFIO_GFX_PLANE_TYPE_PROBE, VFIO_GFX_PLANE_TYPE_DMABUF, VFIO_GFX_PLANE_TYPE_REGION

vfio_device_gfx_plane_info_union [
	region_index	int32
	dmabuf_id	int32
]
