meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/netlink.h>

socket$KGPT_netlink(domain const[AF_NETLINK], type const[SOCK_RAW], proto const[NETLINK_ROUTE]) sock_netlink

bind$KGPT_netlink_ops(fd sock_netlink, addr ptr[in, sockaddr_nl], addrlen len[addr])
connect$KGPT_netlink_ops(fd sock_netlink, addr ptr[in, sockaddr_nl], addrlen len[addr])
accept4$KGPT_netlink_ops(fd sock_netlink, peer ptr[out, sockaddr_nl, opt], peerlen ptr[inout, len[peer, int32]], flags flags[accept_flags]) sock_netlink
sendto$KGPT_netlink_ops(fd sock_netlink, buf ptr[in, array[int8]], len len[buf], f flags[send_flags], addr ptr[in, sockaddr_nl, opt], addrlen len[addr])
recvfrom$KGPT_netlink_ops(fd sock_netlink, buf ptr[out, array[int8]], len len[buf], f flags[recv_flags], addr ptr[in, sockaddr_nl, opt], addrlen len[addr])
getsockopt$KGPT_NETLINK_PKTINFO(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_PKTINFO], val ptr[out, int32], len ptr[inout, bytesize[val, int32]])
getsockopt$KGPT_NETLINK_BROADCAST_ERROR(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_BROADCAST_ERROR], val ptr[out, int32], len ptr[inout, bytesize[val, int32]])
getsockopt$KGPT_NETLINK_NO_ENOBUFS(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_NO_ENOBUFS], val ptr[out, int32], len ptr[inout, bytesize[val, int32]])
getsockopt$KGPT_NETLINK_LIST_MEMBERSHIPS(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_LIST_MEMBERSHIPS], val ptr[out, array[int32]], len ptr[inout, int32])
getsockopt$KGPT_NETLINK_CAP_ACK(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_CAP_ACK], val ptr[out, int32], len ptr[inout, bytesize[val, int32]])
getsockopt$KGPT_NETLINK_EXT_ACK(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_EXT_ACK], val ptr[out, int32], len ptr[inout, bytesize[val, int32]])
getsockopt$KGPT_NETLINK_GET_STRICT_CHK(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_GET_STRICT_CHK], val ptr[out, int32], len ptr[inout, bytesize[val, int32]])
setsockopt$KGPT_NETLINK_PKTINFO(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_PKTINFO], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_ADD_MEMBERSHIP(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_ADD_MEMBERSHIP], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_DROP_MEMBERSHIP(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_DROP_MEMBERSHIP], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_BROADCAST_ERROR(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_BROADCAST_ERROR], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_NO_ENOBUFS(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_NO_ENOBUFS], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_LISTEN_ALL_NSID(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_LISTEN_ALL_NSID], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_CAP_ACK(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_CAP_ACK], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_EXT_ACK(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_EXT_ACK], val int32, len bytesize[val])
setsockopt$KGPT_NETLINK_GET_STRICT_CHK(fd sock_netlink, level const[SOL_NETLINK], opt const[NETLINK_GET_STRICT_CHK], val int32, len bytesize[val])

define NETLINK_ROUTE	0
