meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/sound/firewire.h>

resource fd_snd_motu[fd]

syz_open_dev$KGPT_snd_motu(dev ptr[in, string["/dev/snd/hwC#D#"]], id proc[0, 1], flags flags[open_flags]) fd_snd_motu

ioctl$KGPT_SNDRV_FIREWIRE_IOCTL_MOTU_REGISTER_DSP_METER(fd fd_snd_motu, cmd const[SNDRV_FIREWIRE_IOCTL_MOTU_REGISTER_DSP_METER], arg ptr[out, snd_firewire_motu_register_dsp_meter])
ioctl$KGPT_SNDRV_FIREWIRE_IOCTL_MOTU_COMMAND_DSP_METER(fd fd_snd_motu, cmd const[SNDRV_FIREWIRE_IOCTL_MOTU_COMMAND_DSP_METER], arg ptr[out, snd_firewire_motu_command_dsp_meter])
ioctl$KGPT_SNDRV_FIREWIRE_IOCTL_MOTU_REGISTER_DSP_PARAMETER(fd fd_snd_motu, cmd const[SNDRV_FIREWIRE_IOCTL_MOTU_REGISTER_DSP_PARAMETER], arg ptr[inout, snd_firewire_motu_register_dsp_parameter])

snd_firewire_motu_register_dsp_meter {
	data	array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_METER_COUNT]
}

snd_firewire_motu_register_dsp_parameter {
	mixer		snd_firewire_motu_register_dsp_mixer
	output		snd_firewire_motu_register_dsp_output
	line_input	snd_firewire_motu_register_dsp_line_input
	input		snd_firewire_motu_register_dsp_input
	reserved	array[int8, 64]
}

snd_firewire_motu_command_dsp_meter {
	data	array[int32, SNDRV_FIREWIRE_MOTU_COMMAND_DSP_METER_COUNT]
}

snd_firewire_motu_register_dsp_mixer {
	source	array[snd_firewire_motu_register_dsp_mixer_source, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_COUNT]
	output	snd_firewire_motu_register_dsp_mixer_output
}

snd_firewire_motu_register_dsp_mixer_source {
	gain		array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_SRC_COUNT]
	pan		array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_SRC_COUNT]
	flag		array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_SRC_COUNT]
	paired_balance	array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_SRC_COUNT]
	paired_width	array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_SRC_COUNT]
}

snd_firewire_motu_register_dsp_mixer_output {
	paired_volume	array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_COUNT]
	paired_flag	array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_MIXER_COUNT]
}

snd_firewire_motu_register_dsp_output {
	main_paired_volume	int8
	hp_paired_volume	int8
	hp_paired_assignment	int8
	reserved		array[int8, 5]
}

snd_firewire_motu_register_dsp_line_input {
	boost_flag		int8
	nominal_level_flag	int8
	reserved		array[int8, 6]
}

snd_firewire_motu_register_dsp_input {
	gain_and_invert	array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_ALIGNED_INPUT_COUNT]
	flag		array[int8, SNDRV_FIREWIRE_MOTU_REGISTER_DSP_ALIGNED_INPUT_COUNT]
}

define SNDRV_FIREWIRE_MOTU_COMMAND_DSP_METER_COUNT	0x100
