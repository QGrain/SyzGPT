meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/rtc.h>

syz_open_dev$KGPT_rtc(dev ptr[in, string["/dev/rtc#"]], id proc[0, 1], flags flags[open_flags]) fd_rtc

ioctl$KGPT_RTC_PARAM_GET(fd fd_rtc, cmd const[RTC_PARAM_GET], arg ptr[inout, rtc_param])
ioctl$KGPT_RTC_PARAM_SET(fd fd_rtc, cmd const[RTC_PARAM_SET], arg ptr[in, rtc_param])

rtc_param {
	param	int64
	uvalue	int64
	svalue	int64
	ptr	int64
	index	int32
	__pad	int32
}
