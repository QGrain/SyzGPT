meta arches["amd64"]

include <asm/fcntl.h>
include <asm/ioctl.h>
include <asm/ioctls.h>
include <linux/elf.h>
include <linux/errno.h>
include <linux/eventfd.h>
include <linux/eventpoll.h>
include <linux/fcntl.h>
include <linux/filelock.h>
include <linux/fs.h>
include <linux/futex.h>
include <linux/ioctl.h>
include <linux/loop.h>
include <linux/mount.h>
include <linux/mutex.h>
include <linux/net.h>
include <linux/socket.h>
include <linux/stat.h>
include <linux/time.h>
include <linux/types.h>
include <linux/user.h>
include <linux/uuid.h>
include <uapi/asm/ioctl.h>
include <uapi/asm/ioctls.h>
include <uapi/linux/elf.h>
include <uapi/linux/fs.h>
include <uapi/linux/if_ether.h>
include <uapi/linux/ioctl.h>
include <uapi/linux/module.h>
include <uapi/linux/mount.h>
include <uapi/linux/videodev2.h>
include <uapi/linux/fcntl.h>
include <uapi/sound/asound.h>

resource fd_snd_timer[fd]

openat$KGPT_snd_timer(fd const[AT_FDCWD], file ptr[in, string["/dev/snd/timer"]], flags flags[open_flags], mode const[0]) fd_snd_timer

ioctl$KGPT_SNDRV_TIMER_IOCTL_TREAD_OLD(fd fd_snd_timer, cmd const[SNDRV_TIMER_IOCTL_TREAD_OLD], arg intptr)
ioctl$KGPT_SNDRV_TIMER_IOCTL_TREAD64(fd fd_snd_timer, cmd const[SNDRV_TIMER_IOCTL_TREAD64], arg ptr[in, snd_timer_tread64])

snd_timer_tread64 {
	resolution	int32
	ticks		int64
	ccallback	int32
	ccount		int32
	ccount_frac	int32
	last_tstamp	timespec64
	events		array[snd_timer_event, SND_TIMER_MAX_EVENTS]
}

snd_timer_event {
	tstamp	timespec64
	val	int32
}

timespec64 {
	tv_sec	int64
	tv_nsec	int64
}

define SND_TIMER_MAX_EVENTS	32
